{"mappings":"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","sources":["src/javascript/film-catalog.js"],"sourcesContent":["'use strict';\nimport { getFilms, getGenres, getCategoriesQuery } from './api';\nimport { createPagination } from './pagination';\n\nconst refs = {\n    ulEl: document.querySelector('.search_film_list'),\n    inputEl: document.querySelector('.search_film_input'),\n    divPagination: document.getElementById('pagination'),\n    form: document.getElementById('form'),\n    btnReset: document.querySelector('.btn_reset'),\n    toTop: document.querySelector('.to_top'),\n    falseResultMessage: document.querySelector('.cards__message'),\n  };\n  \n  let categories = {};\n  let currentPage = 1;\n  let searchQuery = '';\n  \n  \n  getGenres()\n    .then(res => {\n      res.forEach(({ id, name }) => {\n        categories[id] = name;\n      });\n      return getFilms(currentPage);\n    })\n    .then(categoriesData => {\n      markupFilm(categoriesData.results);\n      paginationTrendWeek(categoriesData);\n    })\n    .catch(Error);\n  \n  function markupFilm(data) {\n    const markup = data\n      .map(\n        ({\n          poster_path,\n          original_name,\n          original_title,\n          genre_ids,\n          release_date,\n          vote_average,\n          first_air_date,\n        }) => {\n          let url = poster_path\n            ? `https://image.tmdb.org/t/p/original${poster_path}`\n            : 'https://www.tgv.com.my/assets/images/404/movie-poster.jpg';\n          const year = yearsFilm(release_date, first_air_date);\n          let genre = categoriesFilms(genre_ids);\n          return `<li class=\"search_film_img_wrap\">\n  <img src=\"${url}\" alt=\"${original_name || original_title}\"\n    width=\"395\" height=\"574\" class=\"search_film_img\"/>\n  <div class=\"wrap\">\n    <div class=\"search_film_wrap\">\n      <p class=\"search_film_title\">${original_name || original_title}</p>\n      <p class=\"search_film_genre\">${genre} | ${year}</p>\n      <p class=\"stars is-hidden\">${vote_average}</p>\n    </div>\n  \n  </div>\n  </li>`;\n        }\n      )\n      .join('');\n    refs.ulEl.innerHTML = markup;\n  }\n  \n  function categoriesFilms(genreIds) {\n    let categoriesFilm = [];\n    if (typeof genreIds !== 'undefined') {\n      categoriesFilm = genreIds\n        .filter(genre => typeof genre !== 'undefined')\n        .map(genre => {\n          if (!categories[genre]) {\n            return 'Film';\n          }\n          return categories[genre];\n        });\n    }\n    if (categoriesFilm.length > 2) {\n      categoriesFilm = categoriesFilm.slice(0, 2);\n    }\n    if (categoriesFilm.length === 0) {\n      return 'Film';\n    }\n    return categoriesFilm.join(', ');\n  }\n  \n  function yearsFilm(release_date, first_air_date) {\n    const year =\n      typeof release_date !== 'undefined'\n        ? release_date.split('-')[0]\n        : typeof first_air_date !== 'undefined'\n        ? first_air_date.split('-')[0]\n        : '';\n    return year;\n  }\n  \n  refs.form.addEventListener('submit', onSubmit);\n  \n  async function onSubmit(ev) {\n    ev.preventDefault();\n    currentPage = 1;\n    searchQuery = ev.currentTarget.elements.film_name.value.trim();\n    refs.divPagination.classList.add('display-hidden');\n    refs.falseResultMessage.classList.add('display-hidden');\n  \n    if (searchQuery.length >= 1) {\n      refs.btnReset.classList.remove('is-hidden');\n    }\n  \n    const response = await getCategoriesQuery(searchQuery, currentPage);\n    refs.ulEl.innerHTML = '';\n  \n    markupFilm(response.results);\n    paginationSearchFilms(response);\n    addFalseResultText(response);\n  }\n  \n  function paginationTrendWeek(response) {\n    if (response.total_results > 20) {\n      refs.divPagination.classList.remove('display-hidden');\n  \n      const pagination = createPagination(\n        response.total_results,\n        response.total_pages\n      );\n  \n      pagination.on('afterMove', event => {\n        currentPage = event.page;\n        getFilms(currentPage)\n          .then(data => {\n            markupFilm(data.results);\n            window.scrollTo({\n              top: 450,\n              behavior: 'smooth',\n            });\n          })\n          .catch(error => {\n            console.error('Error:', error);\n          });\n      });\n    }\n  }\n  \n  function paginationSearchFilms(response) {\n    if (response.total_results > 20) {\n      refs.divPagination.classList.remove('display-hidden');\n  \n      const pagination = createPagination(\n        response.total_results,\n        response.total_pages\n      );\n  \n      pagination.on('afterMove', event => {\n        currentPage = event.page;\n        getCategoriesQuery(searchQuery, currentPage)\n          .then(data => {\n            markupFilm(data.results);\n            window.scrollTo({\n              top: 450,\n              behavior: 'smooth',\n            });\n          })\n          .catch(error => {\n            console.error('Error:', error);\n          });\n      });\n    }\n  }\n  \n  function addFalseResultText(response) {\n    if (response.total_results === 0) {\n      refs.falseResultMessage.classList.remove('display-hidden');\n    }\n  }\n  \n  refs.btnReset.addEventListener('click', () => {\n    refs.btnReset.classList.add('is-hidden');\n    refs.form.reset();\n  });\n  \n  function Error(err) {\n    console.log(err);\n  }\n  "],"names":["$bpxeT","parcelRequire","$5b0cf1a09c8c8e4d$var$refs","ulEl","document","querySelector","inputEl","divPagination","getElementById","form","btnReset","toTop","falseResultMessage","$5b0cf1a09c8c8e4d$var$categories","$5b0cf1a09c8c8e4d$var$currentPage","$5b0cf1a09c8c8e4d$var$searchQuery","$5b0cf1a09c8c8e4d$var$markupFilm","data","markup","map","param","poster_path","original_name","original_title","genre_ids","release_date","vote_average","first_air_date","url","concat","year","split","$5b0cf1a09c8c8e4d$var$yearsFilm","genre","genreIds","categoriesFilm","filter","length","slice","join","$5b0cf1a09c8c8e4d$var$categoriesFilms","innerHTML","$5b0cf1a09c8c8e4d$var$_onSubmit","$parcel$interopDefault","$2TvXO","mark","_callee","ev","response","preventDefault","currentTarget","elements","film_name","value","trim","classList","add","remove","$8LhE9","getCategoriesQuery","_ctx","sent","results","$5b0cf1a09c8c8e4d$var$paginationSearchFilms","$5b0cf1a09c8c8e4d$var$addFalseResultText","apply","this","arguments","total_results","$krKMH","createPagination","total_pages","on","event","page","then","window","scrollTo","top","behavior","catch","error","console","getGenres","res","forEach","id","name","getFilms","categoriesData","$5b0cf1a09c8c8e4d$var$paginationTrendWeek","err","log","addEventListener","reset"],"version":3,"file":"film-catalog.b9708a4d.js.map"}