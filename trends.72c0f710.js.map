{"mappings":"wQAAA,IAAAA,EAAAC,EAAA,S,0BAECC,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,I,IACOC,EAEAC,EAEAC,EACFC,EAMGC,EAAAC,EAAAC,EAHCC,EAGDC,EAAAC,EAAMC,E,mFAXO,EAAAC,EAAAC,UAAS,G,cAAvBZ,EAAKa,EAAAC,KAELb,EAAWD,EAAMe,QAAQC,MAAM,EAAG,G,UAEnB,EAAAL,EAAAM,a,UAAff,EAAMW,EAAAC,KACRX,EAAe,GAMZC,GAAU,EAAVC,GAAU,EAAVC,OAAUY,IAJbC,OAAOC,YAAc,KAAG,C,uBACpBb,EAAON,EAAS,G,UACDoB,EAAiBd,EAAML,G,QAA5CC,EAAYU,EAAAC,K,kCAEPN,EAAcP,EAAQqB,OAAAC,Y,WAAtBnB,GAAAK,EAAAD,EAAUgB,QAAAC,KAAA,C,uBAAJf,EAAND,EAAUiB,M,KACbvB,E,UAAsBkB,EAAiBX,EAAMR,G,QAA7CC,EAAYU,EAAAc,IAAAd,EAAAC,K,QADTV,GAAU,E,2EAAVC,GAAU,EAAVC,EAAUO,EAAAe,G,4BAAVxB,GAAU,MAAVI,EAAUqB,QAAVrB,EAAUqB,S,sBAAVxB,EAAU,C,sBAAVC,E,gEAKPwB,SAASC,cAAc,uBAAuBC,UAAY7B,E,4EAjB3D,GAoBD,I,EAAMkB,G,EAAmBzB,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,EAAOQ,EAAML,G,IAE9B+B,EACAC,EACAC,EACAC,EAEAC,E,yEALAJ,EADU,kDACW1B,EAAK+B,cAC1BJ,EAAQ3B,EAAKgC,eACbJ,EAAc5B,EAAKiC,aAAaC,MAAM,KAAK,GAC3CL,EAAc7B,EAAKmC,aAEnBL,EAAanC,EAChByC,QAAO,SAACC,G,OAAUrC,EAAKsC,UAAU7B,MAAM,EAAG,GAAG8B,SAASF,EAAMG,G,IAC5DC,KAAI,SAAAC,G,OAAOA,EAAJC,I,IACPC,KAAK,M,kBAED,kEAI4BC,OAHjBnB,EAAS,6GAIcmB,OADNlB,EAAM,oDAC+CkB,OAA/Cf,EAAW,sCAEtBe,OAF0DjB,EAAY,2DAE1DiB,OAAZhB,EAAY,wC,oDAnBZ7B,EAAML,G","sources":["src/javascript/trends.js"],"sourcesContent":["import { getFilms, getGenres } from './api';\n\n(async () => {\n  const films = await getFilms(1);\n\n  const topThree = films.results.slice(0, 3);\n\n  const genres = await getGenres();\n  let resultMarkup = '';\n\n  if (window.innerWidth <= 768) {\n    const film = topThree[0];\n    resultMarkup = await createItemMarkup(film, genres);\n  } else {\n    for (const film of topThree) {\n      resultMarkup += await createItemMarkup(film, genres);\n    }\n  }\n\n  document.querySelector('.weekly_trends_list').innerHTML = resultMarkup;\n})();\n\nconst createItemMarkup = async (film, genres) => {\n  const baseUrl = 'https://image.tmdb.org/t/p/w600_and_h900_bestv2';\n  const imageSrc = baseUrl + film.backdrop_path;\n  const title = film.original_title;\n  const releaseYear = film.release_date.split('-')[0];\n  const voteAverage = film.vote_average;\n\n  const filmGenres = genres\n    .filter((genre) => film.genre_ids.slice(0, 2).includes(genre.id))\n    .map(({ name }) => name)\n    .join(', ');\n\n  return `<li class='weekly_trends_list_item film-1'>\n        <img src='${imageSrc}'>\n        <div class='weekly-trends_description'>\n          <div>\n            <h4 class='film_title'>${title}</h4>\n            <h5 class='film_description'>${filmGenres}<span class='separator'> | </span>${releaseYear}</h5>\n          </div>\n          <div class='rating'>${voteAverage}</div>\n        </div>\n      </li>`;\n};"],"names":["$bpxeT","parcelRequire","$parcel$interopDefault","$2TvXO","mark","_callee","films","topThree","genres","resultMarkup","_iteratorNormalCompletion","_didIteratorError","_iteratorError","film","_iterator","_step","film1","$8LhE9","getFilms","_ctx","sent","results","slice","getGenres","undefined","window","innerWidth","$e444f4c5cdaffc6a$var$createItemMarkup","Symbol","iterator","next","done","value","t0","t1","return","document","querySelector","innerHTML","imageSrc","title","releaseYear","voteAverage","filmGenres","backdrop_path","original_title","release_date","split","vote_average","filter","genre","genre_ids","includes","id","map","param","name","join","concat"],"version":3,"file":"trends.72c0f710.js.map"}