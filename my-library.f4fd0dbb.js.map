{"mappings":"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","sources":["src/javascript/librarymain.js"],"sourcesContent":["import Pagination from 'tui-pagination';\nimport { filmAPI } from '../javascript/mylibraryapi';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const ulEl = document.querySelector('.search_film_list');\n  const dropdownButton = document.querySelector('.dropdown-button');\n  const dropdownContent = document.querySelector('.dropdown-content');\n  const genreList = document.querySelector('.genre-list');\n  const errorSection = document.querySelector('.error-section');\n  const librarySection = document.querySelector('.library-section');\n  const dropdown = document.querySelector('.dropdown');\n\n  let categories = {};\n  const API = new filmAPI();\n\n  API.getCategoriesGenres()\n    .then(res => {\n      res.forEach(({ id, name }) => {\n        categories[id] = name;\n      });\n      return API.getCategories();\n    })\n    .then(categoriesData => {\n      markupFilm(categoriesData);\n      initPagination(categoriesData.length);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n\n  function markupFilm(data) {\n    if (data.length > 0) {\n      ulEl.innerHTML = generateFilmMarkup(data);\n      errorSection.classList.add('is-hidden');\n      librarySection.classList.remove('is-hidden');\n    } else {\n      ulEl.innerHTML = '';\n      errorSection.classList.remove('is-hidden');\n      librarySection.classList.add('is-hidden');\n    }\n  }\n\n  function generateFilmMarkup(data) {\n    return data\n      .map(\n        ({\n          poster_path,\n          original_name,\n          original_title,\n          genre_ids,\n          release_date,\n          vote_average,\n          first_air_date,\n        }) => {\n          let url = poster_path\n            ? `https://image.tmdb.org/t/p/original${poster_path}`\n            : 'https://www.tgv.com.my/assets/images/404/movie-poster.jpg';\n          const year = yearsFilm(release_date, first_air_date);\n          let genre = categoriesFilms(genre_ids);\n          let starsClass = vote_average ? '' : 'is-hidden'; // Установка класса по умолчанию\n          return `<li class=\"search_film_img_wrap\">\n            <img src=\"${url}\" alt=\"${\n            original_name || original_title\n          }\" width=\"395\" height=\"574\" class=\"search_film_img\" />\n            <div class=\"wrap\">\n              <div class=\"search_film_wrap\">\n                <p class=\"search_film_title\">${\n                  original_name || original_title\n                }</p>\n                <p class=\"search_film_genre\">${genre} | ${year}</p>\n                <p class=\"stars ${starsClass}\">${vote_average}</p> <!-- Использование класса -->\n              </div>\n            </div>\n          </li>`;\n        }\n      )\n      .join('');\n  }\n\n  function categoriesFilms(genreIds) {\n    let categoriesFilm = genreIds\n      .filter(genre => genre !== undefined)\n      .map(genre => categories[genre]);\n\n    if (categoriesFilm.length > 2) {\n      categoriesFilm = categoriesFilm.slice(0, 2);\n    }\n    if (categoriesFilm.length === 0) {\n      return 'Film';\n    }\n    return categoriesFilm.join(', ');\n  }\n\n  function yearsFilm(release_date, first_air_date) {\n    const year =\n      typeof release_date !== 'undefined'\n        ? release_date.split('-')[0]\n        : first_air_date.split('-')[0];\n    return year;\n  }\n\n  dropdownButton.addEventListener('click', () => {\n    dropdownContent.classList.toggle('active');\n  });\n\n  genreList.addEventListener('click', event => {\n    const genreName = event.target.dataset.genre;\n    if (genreName === 'All') {\n      API.getCategories().then(res => {\n        markupFilm(res);\n        initPagination(res.length);\n      });\n    } else {\n      const genreId = Object.keys(categories).find(\n        key => categories[key] === genreName\n      );\n      API.getCategoriesQuery(genreName).then(res => {\n        markupFilm(res);\n        initPagination(res.length);\n      });\n    }\n    dropdownContent.classList.remove('active');\n  });\n\n  function initPagination(totalItems) {\n    const paginationContainer = document.getElementById('pagination2');\n    const itemsPerPage = 12;\n\n    const options = {\n      totalItems,\n      itemsPerPage,\n      visiblePages: 5,\n      centerAlign: true,\n    };\n\n    const pagination = new Pagination(paginationContainer, options);\n\n    pagination.on('afterMove', event => {\n      const currentPage = event.page;\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = start + itemsPerPage;\n\n      API.getCategories()\n        .then(res => {\n          const pageItems = res.slice(start, end);\n          markupFilm(pageItems);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    });\n  }\n});\n"],"names":["$1VFfL","parcelRequire","document","addEventListener","ulEl","querySelector","dropdownButton","dropdownContent","genreList","errorSection","librarySection","categories","API","$j5MaG","filmAPI","markupFilm","data","length","innerHTML","map","param","poster_path","original_name","original_title","genre_ids","release_date","vote_average","first_air_date","url","concat","year","split","yearsFilm","genre","genreIds","categoriesFilm","filter","undefined","slice","join","categoriesFilms","starsClass","generateFilmMarkup","classList","add","remove","initPagination","totalItems","paginationContainer","getElementById","options","itemsPerPage","visiblePages","centerAlign","$parcel$interopDefault","on","event","start","page","end","getCategories","then","res","catch","error","console","log","getCategoriesGenres","forEach","id","name","categoriesData","toggle","genreName","target","dataset","Object","keys","find","key","getCategoriesQuery"],"version":3,"file":"my-library.f4fd0dbb.js.map"}