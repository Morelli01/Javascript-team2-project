{"mappings":"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","sources":["src/javascript/film-catalog.js"],"sourcesContent":["'use strict';\nimport { getFilms, getGenres, getCategoriesQuery } from './api';\nimport { createPagination } from './pagination';\n\nconst refs = {\n    ulEl: document.querySelector('.search_film_list'),\n    inputEl: document.querySelector('.search_film_input'),\n    divPagination: document.getElementById('pagination'),\n    form: document.getElementById('form'),\n    btnReset: document.querySelector('.btn_reset'),\n    toTop: document.querySelector('.to_top'),\n    falseResultMessage: document.querySelector('.cards__message'),\n  };\n  \n  let categories = {};\n  let currentPage = 1;\n  let searchQuery = '';\n  \n  \n  getGenres()\n    .then(res => {\n      res.forEach(({ id, name }) => {\n        categories[id] = name;\n      });\n      return getFilms(currentPage);\n    })\n    .then(categoriesData => {\n      markupFilm(categoriesData.results);\n      paginationTrendWeek(categoriesData);\n    })\n    .catch(Error);\n  \n  function markupFilm(data) {\n    const markup = data\n      .map(\n        ({\n          poster_path,\n          original_name,\n          original_title,\n          genre_ids,\n          release_date,\n          vote_average,\n          first_air_date,\n        }) => {\n          let url = poster_path\n            ? `https://image.tmdb.org/t/p/original${poster_path}`\n            : 'https://www.tgv.com.my/assets/images/404/movie-poster.jpg';\n          const year = yearsFilm(release_date, first_air_date);\n          let genre = categoriesFilms(genre_ids);\n          return `<li class=\"search_film_img_wrap\">\n  <img src=\"${url}\" alt=\"${original_name || original_title}\"\n    width=\"395\" height=\"574\" class=\"search_film_img\"/>\n  <div class=\"wrap\">\n    <div class=\"search_film_wrap\">\n      <p class=\"search_film_title\">${original_name || original_title}</p>\n      <p class=\"search_film_genre\">${genre} | ${year}</p>\n      <p class=\"stars is-hidden\">${vote_average}</p>\n    </div>\n  \n  </div>\n  </li>`;\n        }\n      )\n      .join('');\n    refs.ulEl.innerHTML = markup;\n  }\n  \n  function categoriesFilms(genreIds) {\n    let categoriesFilm = [];\n    if (typeof genreIds !== 'undefined') {\n      categoriesFilm = genreIds\n        .filter(genre => typeof genre !== 'undefined')\n        .map(genre => {\n          if (!categories[genre]) {\n            return 'Film';\n          }\n          return categories[genre];\n        });\n    }\n    if (categoriesFilm.length > 2) {\n      categoriesFilm = categoriesFilm.slice(0, 2);\n    }\n    if (categoriesFilm.length === 0) {\n      return 'Film';\n    }\n    return categoriesFilm.join(', ');\n  }\n  \n  function yearsFilm(release_date, first_air_date) {\n    const year =\n      typeof release_date !== 'undefined'\n        ? release_date.split('-')[0]\n        : typeof first_air_date !== 'undefined'\n        ? first_air_date.split('-')[0]\n        : '';\n    return year;\n  }\n  \n  refs.form.addEventListener('submit', onSubmit);\n  \n  async function onSubmit(ev) {\n    ev.preventDefault();\n    currentPage = 1;\n    searchQuery = ev.currentTarget.elements.film_name.value.trim();\n    refs.divPagination.classList.add('display-hidden');\n    refs.falseResultMessage.classList.add('display-hidden');\n  \n    if (searchQuery.length >= 1) {\n      refs.btnReset.classList.remove('is-hidden');\n    }\n  \n    const response = await getCategoriesQuery(searchQuery, currentPage);\n    refs.ulEl.innerHTML = '';\n  \n    markupFilm(response.results);\n    paginationSearchFilms(response);\n    addFalseResultText(response);\n  }\n  \n  function paginationTrendWeek(response) {\n    if (response.total_results > 20) {\n      refs.divPagination.classList.remove('display-hidden');\n  \n      const pagination = createPagination(\n        response.total_results,\n        response.total_pages\n      );\n  \n      pagination.on('afterMove', event => {\n        currentPage = event.page;\n        getFilms(currentPage)\n          .then(data => {\n            markupFilm(data.results);\n            window.scrollTo({\n              top: 450,\n              behavior: 'smooth',\n            });\n          })\n          .catch(error => {\n            console.error('Error:', error);\n          });\n      });\n    }\n  }\n  \n  function paginationSearchFilms(response) {\n    if (response.total_results > 20) {\n      refs.divPagination.classList.remove('display-hidden');\n  \n      const pagination = createPagination(\n        response.total_results,\n        response.total_pages\n      );\n  \n      pagination.on('afterMove', event => {\n        currentPage = event.page;\n        getCategoriesQuery(searchQuery, currentPage)\n          .then(data => {\n            markupFilm(data.results);\n            window.scrollTo({\n              top: 450,\n              behavior: 'smooth',\n            });\n          })\n          .catch(error => {\n            console.error('Error:', error);\n          });\n      });\n    }\n  }\n  \n  function addFalseResultText(response) {\n    if (response.total_results === 0) {\n      refs.falseResultMessage.classList.remove('display-hidden');\n    }\n  }\n  \n  refs.btnReset.addEventListener('click', () => {\n    refs.btnReset.classList.add('is-hidden');\n    refs.form.reset();\n  });\n  \n  function Error(err) {\n    console.log(err);\n  }\n  "],"names":["$dK6vY","parcelRequire","$f86c2bb9432d860c$var$refs","ulEl","document","querySelector","inputEl","divPagination","getElementById","form","btnReset","toTop","falseResultMessage","$f86c2bb9432d860c$var$categories","$f86c2bb9432d860c$var$currentPage","$f86c2bb9432d860c$var$searchQuery","$f86c2bb9432d860c$var$markupFilm","data","markup","map","poster_path","original_name","original_title","genre_ids","release_date","vote_average","first_air_date","url","year","split","$f86c2bb9432d860c$var$yearsFilm","genreIds","categoriesFilm","filter","genre","length","slice","join","$f86c2bb9432d860c$var$categoriesFilms","innerHTML","getGenres","then","res","forEach","id","name","getFilms","categoriesData","results","response","total_results","classList","remove","$3u1GM","createPagination","total_pages","on","event","page","window","scrollTo","top","behavior","catch","error","console","$f86c2bb9432d860c$var$paginationTrendWeek","err","log","addEventListener","async","ev","preventDefault","currentTarget","elements","film_name","value","trim","add","getCategoriesQuery","$f86c2bb9432d860c$var$paginationSearchFilms","$f86c2bb9432d860c$var$addFalseResultText","reset"],"version":3,"file":"film-catalog.022b9f9b.js.map"}