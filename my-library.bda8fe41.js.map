{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aAGAC,SAASC,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAOF,SAASG,cAAc,qBAC9BC,EAAiBJ,SAASG,cAAc,oBACxCE,EAAkBL,SAASG,cAAc,qBACzCG,EAAYN,SAASG,cAAc,eACnCI,EAAeP,SAASG,cAAc,kBACtCK,EAAiBR,SAASG,cAAc,oBAGxCM,GAFWT,SAASG,cAAc,aACrBH,SAASG,cAAc,gBACrBH,SAASG,cAAc,mBAE5C,IAAIO,EAAa,GACjB,MAAMC,EAAM,IAAI,EAAAC,EAAAC,SAgBhB,SAASC,EAAWC,GACdA,EAAKC,OAAS,GAChBd,EAAKe,UAAYC,mBAAmBH,GACpCR,EAAaY,UAAUC,IAAI,aAC3BZ,EAAeW,UAAUE,OAAO,eAEhCnB,EAAKe,UAAY,GACjBV,EAAaY,UAAUE,OAAO,aAC9Bb,EAAeW,UAAUC,IAAI,a,CAiDjC,SAASE,EAAeC,GACtB,MAAMC,EAAsBxB,SAASyB,eAAe,eAG9CC,EAAU,C,WACdH,E,aAHmB,GAKnBI,aAAc,EACdC,aAAa,GAGI,IAAIC,EAAA/B,GAAJ,CAAe0B,EAAqBE,GAE5CI,GAAG,aAAaC,IACzB,MACMC,EAba,IAYCD,EAAME,KACG,GACvBC,EAAMF,EAdO,GAgBnBrB,EAAIwB,gBACDC,MAAKC,IAEJvB,EADkBuB,EAAIC,MAAMN,EAAOE,GACd,IAEtBK,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,G,CAhGR7B,EAAIgC,sBACDP,MAAKC,IACJA,EAAIO,SAAQ,EAACC,GAAEA,EAAEC,KAAEA,MACjBpC,EAAWmC,GAAMC,CAAI,IAEhBnC,EAAIwB,mBAEZC,MAAKW,IACJjC,EAAWiC,GACXzB,EAAeyB,EAAe/B,OAAO,IAEtCuB,OAAMC,IACLC,QAAQC,IAAIF,EAAM,IAatB/B,EAAauC,MAAMC,KAAO,IAuB1B7C,EAAeH,iBAAiB,SAAS,KACvCI,EAAgBc,UAAU+B,OAAO,SAAS,IAG5C5C,EAAUL,iBAAiB,SAAS8B,IAClC,MAAMoB,EAAYpB,EAAMqB,OAAOC,QAAQC,MACvC,GAAkB,QAAdH,EACFxC,EAAIwB,gBAAgBC,MAAKC,IACvBvB,EAAWuB,GACXf,EAAee,EAAIrB,OAAO,QAEvB,CACWuC,OAAOC,KAAK9C,GAAY+C,MACtCC,GAAOhD,EAAWgD,KAASP,IAE7BxC,EAAIgD,mBAAmBR,GAAWf,MAAKC,IACrCvB,EAAWuB,GACXf,EAAee,EAAIrB,OAAO,G,CAG9BX,EAAgBc,UAAUE,OAAO,SAAS,G","sources":["src/javascript/librarymain.js"],"sourcesContent":["import Pagination from 'tui-pagination';\nimport { filmAPI } from '../javascript/mylibraryapi';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const ulEl = document.querySelector('.search_film_list');\n  const dropdownButton = document.querySelector('.dropdown-button');\n  const dropdownContent = document.querySelector('.dropdown-content');\n  const genreList = document.querySelector('.genre-list');\n  const errorSection = document.querySelector('.error-section');\n  const librarySection = document.querySelector('.library-section');\n  const dropdown = document.querySelector('.dropdown');\n  const librarybtn = document.querySelector('.librarybtnh');\n  const libraryvideo = document.querySelector('#trailer-video');\n\n  let categories = {};\n  const API = new filmAPI();\n\n  API.getCategoriesGenres()\n    .then(res => {\n      res.forEach(({ id, name }) => {\n        categories[id] = name;\n      });\n      return API.getCategories();\n    })\n    .then(categoriesData => {\n      markupFilm(categoriesData);\n      initPagination(categoriesData.length);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  function markupFilm(data) {\n    if (data.length > 0) {\n      ulEl.innerHTML = generateFilmMarkup(data);\n      errorSection.classList.add('is-hidden');\n      librarySection.classList.remove('is-hidden');\n    } else {\n      ulEl.innerHTML = '';\n      errorSection.classList.remove('is-hidden');\n      librarySection.classList.add('is-hidden');\n    }\n  }\n  libraryvideo.styly.left = '0';\n  function categoriesFilms(genreIds) {\n    let categoriesFilm = genreIds\n      .filter(genre => genre !== undefined)\n      .map(genre => categories[genre]);\n\n    if (categoriesFilm.length > 2) {\n      categoriesFilm = categoriesFilm.slice(0, 2);\n    }\n    if (categoriesFilm.length === 0) {\n      return 'Film';\n    }\n    return categoriesFilm.join(', ');\n  }\n\n  function yearsFilm(release_date, first_air_date) {\n    const year =\n      typeof release_date !== 'undefined'\n        ? release_date.split('-')[0]\n        : first_air_date.split('-')[0];\n    return year;\n  }\n\n  dropdownButton.addEventListener('click', () => {\n    dropdownContent.classList.toggle('active');\n  });\n\n  genreList.addEventListener('click', event => {\n    const genreName = event.target.dataset.genre;\n    if (genreName === 'All') {\n      API.getCategories().then(res => {\n        markupFilm(res);\n        initPagination(res.length);\n      });\n    } else {\n      const genreId = Object.keys(categories).find(\n        key => categories[key] === genreName\n      );\n      API.getCategoriesQuery(genreName).then(res => {\n        markupFilm(res);\n        initPagination(res.length);\n      });\n    }\n    dropdownContent.classList.remove('active');\n  });\n\n  function initPagination(totalItems) {\n    const paginationContainer = document.getElementById('pagination2');\n    const itemsPerPage = 12;\n\n    const options = {\n      totalItems,\n      itemsPerPage,\n      visiblePages: 5,\n      centerAlign: true,\n    };\n\n    const pagination = new Pagination(paginationContainer, options);\n\n    pagination.on('afterMove', event => {\n      const currentPage = event.page;\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = start + itemsPerPage;\n\n      API.getCategories()\n        .then(res => {\n          const pageItems = res.slice(start, end);\n          markupFilm(pageItems);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    });\n  }\n});\n"],"names":["$fb9GJ","parcelRequire","document","addEventListener","ulEl","querySelector","dropdownButton","dropdownContent","genreList","errorSection","librarySection","libraryvideo","categories","API","$i0Y6p","filmAPI","markupFilm","data","length","innerHTML","generateFilmMarkup","classList","add","remove","initPagination","totalItems","paginationContainer","getElementById","options","visiblePages","centerAlign","$parcel$interopDefault","on","event","start","page","end","getCategories","then","res","slice","catch","error","console","log","getCategoriesGenres","forEach","id","name","categoriesData","styly","left","toggle","genreName","target","dataset","genre","Object","keys","find","key","getCategoriesQuery"],"version":3,"file":"my-library.bda8fe41.js.map"}