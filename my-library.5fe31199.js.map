{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aAGAC,SAASC,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAOF,SAASG,cAAc,qBAC9BC,EAAiBJ,SAASG,cAAc,oBACxCE,EAAkBL,SAASG,cAAc,qBACzCG,EAAYN,SAASG,cAAc,eACnCI,EAAeP,SAASG,cAAc,kBACtCK,EAAiBR,SAASG,cAAc,oBAC7BH,SAASG,cAAc,aAExC,IAAIM,EAAa,GACjB,MAAMC,EAAM,IAAI,EAAAC,EAAAC,SAiBhB,SAASC,EAAWC,GACdA,EAAKC,OAAS,GAChBb,EAAKc,UAUT,SAA4BF,GAC1B,OAAOA,EACJG,KACC,EAACC,YACCA,EAAWC,cACXA,EAAaC,eACbA,EAAcC,UACdA,EAASC,aACTA,EAAYC,aACZA,EAAYC,eACZA,MAEA,IAAIC,EAAMP,EACN,sCAAsCA,IACtC,4DACJ,MAAMQ,EAoCd,SAAmBJ,EAAcE,GAK/B,YAH0B,IAAjBF,EACHA,EAAaK,MAAM,KAAK,GACxBH,EAAeG,MAAM,KAAK,E,CAxCbC,CAAUN,EAAcE,GAGX,MAAnB,4DACOC,WACZN,GAAiBC,sLAKXD,GAAiBC,uDAYjC,SAAyBS,GACvB,IAAIC,EAAiBD,EAClBE,QAAOC,QAAmBC,IAAVD,IAChBf,KAAIe,GAASvB,EAAWuB,KAEvBF,EAAef,OAAS,IAC1Be,EAAiBA,EAAeI,MAAM,EAAG,IAE3C,OAA8B,IAA1BJ,EAAef,OACV,OAEFe,EAAeK,KAAK,K,CAhCTC,CAAgBf,QAWoBK,0CAV/BH,EAAe,GAAK,gBAWEA,sGAGjC,IAGTY,KAAK,G,CA5CWE,CAAmBvB,GACpCP,EAAa+B,UAAUC,IAAI,aAC3B/B,EAAe8B,UAAUE,OAAO,eAEhCtC,EAAKc,UAAY,GACjBT,EAAa+B,UAAUE,OAAO,aAC9BhC,EAAe8B,UAAUC,IAAI,a,CAsFjC,SAASE,EAAeC,GACtB,MAAMC,EAAsB3C,SAAS4C,eAAe,eAG9CC,EAAU,C,WACdH,E,aAHmB,GAKnBI,aAAc,EACdC,aAAa,GAGI,IAAIC,EAAAlD,GAAJ,CAAe6C,EAAqBE,GAE5CI,GAAG,aAAaC,IACzB,MACMC,EAba,IAYCD,EAAME,KACG,GACvBC,EAAMF,EAdO,GAgBnBzC,EAAI4C,gBACDC,MAAKC,IAEJ3C,EADkB2C,EAAItB,MAAMiB,EAAOE,GACd,IAEtBI,OAAMC,IACLC,QAAQC,IAAIF,EAAM,GAClB,G,CAtIRhD,EAAImD,sBACDN,MAAKC,IACJA,EAAIM,SAAQ,EAACC,GAAEA,EAAEC,KAAEA,MACjBvD,EAAWsD,GAAMC,CAAI,IAEhBtD,EAAI4C,mBAEZC,MAAKU,IACJpD,EAAWoD,GACXxB,EAAewB,EAAelD,OAAO,IAEtC0C,OAAMC,IACLC,QAAQC,IAAIF,EAAM,IA0EtBtD,EAAeH,iBAAiB,SAAS,KACvCI,EAAgBiC,UAAU4B,OAAO,SAAS,IAG5C5D,EAAUL,iBAAiB,SAASiD,IAClC,MAAMiB,EAAYjB,EAAMkB,OAAOC,QAAQrC,MACvC,GAAkB,QAAdmC,EACFzD,EAAI4C,gBAAgBC,MAAKC,IACvB3C,EAAW2C,GACXf,EAAee,EAAIzC,OAAO,QAEvB,CACWuD,OAAOC,KAAK9D,GAAY+D,MACtCC,GAAOhE,EAAWgE,KAASN,IAE7BzD,EAAIgE,mBAAmBP,GAAWZ,MAAKC,IACrC3C,EAAW2C,GACXf,EAAee,EAAIzC,OAAO,G,CAG9BV,EAAgBiC,UAAUE,OAAO,SAAS,G","sources":["src/javascript/librarymain.js"],"sourcesContent":["import Pagination from 'tui-pagination';\nimport { filmAPI } from '../javascript/mylibraryapi';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const ulEl = document.querySelector('.search_film_list');\n  const dropdownButton = document.querySelector('.dropdown-button');\n  const dropdownContent = document.querySelector('.dropdown-content');\n  const genreList = document.querySelector('.genre-list');\n  const errorSection = document.querySelector('.error-section');\n  const librarySection = document.querySelector('.library-section');\n  const dropdown = document.querySelector('.dropdown');\n\n  let categories = {};\n  const API = new filmAPI();\n\n  API.getCategoriesGenres()\n    .then(res => {\n      res.forEach(({ id, name }) => {\n        categories[id] = name;\n      });\n      return API.getCategories();\n    })\n    .then(categoriesData => {\n      markupFilm(categoriesData);\n      initPagination(categoriesData.length);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n\n  function markupFilm(data) {\n    if (data.length > 0) {\n      ulEl.innerHTML = generateFilmMarkup(data);\n      errorSection.classList.add('is-hidden');\n      librarySection.classList.remove('is-hidden');\n    } else {\n      ulEl.innerHTML = '';\n      errorSection.classList.remove('is-hidden');\n      librarySection.classList.add('is-hidden');\n    }\n  }\n\n  function generateFilmMarkup(data) {\n    return data\n      .map(\n        ({\n          poster_path,\n          original_name,\n          original_title,\n          genre_ids,\n          release_date,\n          vote_average,\n          first_air_date,\n        }) => {\n          let url = poster_path\n            ? `https://image.tmdb.org/t/p/original${poster_path}`\n            : 'https://www.tgv.com.my/assets/images/404/movie-poster.jpg';\n          const year = yearsFilm(release_date, first_air_date);\n          let genre = categoriesFilms(genre_ids);\n          let starsClass = vote_average ? '' : 'is-hidden'; // Установка класса по умолчанию\n          return `<li class=\"search_film_img_wrap\">\n            <img src=\"${url}\" alt=\"${\n            original_name || original_title\n          }\" width=\"395\" height=\"574\" class=\"search_film_img\" />\n            <div class=\"wrap\">\n              <div class=\"search_film_wrap\">\n                <p class=\"search_film_title\">${\n                  original_name || original_title\n                }</p>\n                <p class=\"search_film_genre\">${genre} | ${year}</p>\n                <p class=\"stars ${starsClass}\">${vote_average}</p> <!-- Использование класса -->\n              </div>\n            </div>\n          </li>`;\n        }\n      )\n      .join('');\n  }\n\n  function categoriesFilms(genreIds) {\n    let categoriesFilm = genreIds\n      .filter(genre => genre !== undefined)\n      .map(genre => categories[genre]);\n\n    if (categoriesFilm.length > 2) {\n      categoriesFilm = categoriesFilm.slice(0, 2);\n    }\n    if (categoriesFilm.length === 0) {\n      return 'Film';\n    }\n    return categoriesFilm.join(', ');\n  }\n\n  function yearsFilm(release_date, first_air_date) {\n    const year =\n      typeof release_date !== 'undefined'\n        ? release_date.split('-')[0]\n        : first_air_date.split('-')[0];\n    return year;\n  }\n\n  dropdownButton.addEventListener('click', () => {\n    dropdownContent.classList.toggle('active');\n  });\n\n  genreList.addEventListener('click', event => {\n    const genreName = event.target.dataset.genre;\n    if (genreName === 'All') {\n      API.getCategories().then(res => {\n        markupFilm(res);\n        initPagination(res.length);\n      });\n    } else {\n      const genreId = Object.keys(categories).find(\n        key => categories[key] === genreName\n      );\n      API.getCategoriesQuery(genreName).then(res => {\n        markupFilm(res);\n        initPagination(res.length);\n      });\n    }\n    dropdownContent.classList.remove('active');\n  });\n\n  function initPagination(totalItems) {\n    const paginationContainer = document.getElementById('pagination2');\n    const itemsPerPage = 12;\n\n    const options = {\n      totalItems,\n      itemsPerPage,\n      visiblePages: 5,\n      centerAlign: true,\n    };\n\n    const pagination = new Pagination(paginationContainer, options);\n\n    pagination.on('afterMove', event => {\n      const currentPage = event.page;\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = start + itemsPerPage;\n\n      API.getCategories()\n        .then(res => {\n          const pageItems = res.slice(start, end);\n          markupFilm(pageItems);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    });\n  }\n});\n"],"names":["$fb9GJ","parcelRequire","document","addEventListener","ulEl","querySelector","dropdownButton","dropdownContent","genreList","errorSection","librarySection","categories","API","$i0Y6p","filmAPI","markupFilm","data","length","innerHTML","map","poster_path","original_name","original_title","genre_ids","release_date","vote_average","first_air_date","url","year","split","yearsFilm","genreIds","categoriesFilm","filter","genre","undefined","slice","join","categoriesFilms","generateFilmMarkup","classList","add","remove","initPagination","totalItems","paginationContainer","getElementById","options","visiblePages","centerAlign","$parcel$interopDefault","on","event","start","page","end","getCategories","then","res","catch","error","console","log","getCategoriesGenres","forEach","id","name","categoriesData","toggle","genreName","target","dataset","Object","keys","find","key","getCategoriesQuery"],"version":3,"file":"my-library.5fe31199.js.map"}