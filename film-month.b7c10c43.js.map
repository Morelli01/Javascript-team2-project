{"mappings":"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","sources":["src/javascript/film-month.js","src/javascript/utils.js","src/javascript/movie-library.js","<<jsx-config-pragma.js>>"],"sourcesContent":["import { getGenres, getRandomFilmOfMonth, getCategoriesId } from './api';\nimport { spinnerStart, spinnerStop } from './spin';\nimport { round } from './utils';\nimport { MovieLibrary } from './movie-library';\n\nlet currentFilm = null;\n\n(async () => {\n  const filmMonthWrapper = document.querySelector('.film-month_wrapper');\n  if (!filmMonthWrapper) return;\n\n  spinnerStart();\n  const film = await getRandomFilmOfMonth();\n  currentFilm = film;\n  const findFilm = await getCategoriesId(film.id);\n\n  const genres = await getGenres();\n  // spinnerStop()\n\n  if (filmMonthWrapper) {\n    filmMonthWrapper.innerHTML = createMarkup(film, genres);\n  }\n\n  const addButton = document.querySelector('.film-month_button-add');\n  addButton.addEventListener('click', async event => {\n    const movieLibrary = new MovieLibrary();\n    const isInLibrary = movieLibrary.isFilmInLibrary(event.target.dataset.id);\n    const button = document.querySelector('.film-month_button-add');\n    if (isInLibrary) {\n      console.log('removing');\n      movieLibrary.removeFilmFromLibrary(findFilm);\n    } else {\n      console.log('adding');\n      movieLibrary.addFilmToLibrary(findFilm);\n    }\n    button.textContent = isInLibrary\n      ? 'Add to my library'\n      : 'Remove from my library';\n  });\n  spinnerStop();\n})();\n\nconst createMarkup = (film, genres) => {\n  const baseUrl =\n    window.innerWidth <= 600\n      ? 'https://image.tmdb.org/t/p/w600_and_h900_bestv2'\n      : 'https://image.tmdb.org/t/p/w1066_and_h600_bestv2';\n  const imageSrc = baseUrl + film.poster_path;\n  const overview = film.overview;\n  const title = film.original_title;\n\n  const releaseDate = new Date(film.release_date);\n  const day = releaseDate.getDate().toString().padStart(2, '0');\n  const month = (releaseDate.getMonth() + 1).toString().padStart(2, '0');\n  const year = releaseDate.getFullYear();\n\n  const formattedReleaseDate = `${day}.${month}.${year}`;\n\n  const movieLibrary = new MovieLibrary();\n  const isInLibrary = movieLibrary.isFilmInLibrary(film.id);\n\n  const voteAverage = film.vote_average;\n  const voteCount = film.vote_count;\n  const popularity = film.popularity;\n  const alt = film.title;\n  const filmGenres = genres\n    .filter(genre => film.genre_ids.slice(0, 2).includes(genre.id))\n    .map(({ name }) => name)\n    .join(', ');\n  return `\n      <div class='film-month_image'>\n        <img class='film-month_img' src='${imageSrc}' alt='${alt}'>\n      </div>\n      <div class='film-month_content'>\n        <div>\n          <h3 class='film-month_info-title'>${title}</h3>\n        </div>\n        <div class='film-month_info'>\n          <div class='film-month_info-item'>\n            <span class='film-month_info-label'>Release date</span>\n            <span class='film-month_info-value film-month_info-year'>${formattedReleaseDate}</span>\n          </div>\n          <div class='film-month_info-item'>\n            <span class='film-month_info-label'>Vote/Votes</span>\n            <span class='film-month_info-value'>\n              <span class='value-number'>${voteAverage}</span>\n               <span class='value-separator'>/</span>\n              <span class='value-number'>${voteCount}</span>\n            </span>\n          </div>\n          <div class='film-month_info-item'>\n            <span class='film-month_info-label'>Popularity</span>\n            <span class='film-month_info-value span-value'>${round(\n              popularity,\n              10\n            )}</span>\n          </div>\n          <div class='film-month_info-item'>\n            <span class='film-month_info-label'>Genre</span>\n            <span class='film-month_info-value span-value'>${filmGenres}</span>\n          </div>\n        </div>\n        <div class='film-month_about'>\n          <h4 class='film-month_about-title'>About</h4>\n          <p class='film-month_about-description'>${overview}</p>\n        </div>\n        <div class='film-month_button'>\n          <button class='button film-month_button-add' data-id='${film.id}'>\n          ${isInLibrary ? 'Remove from my library' : 'Add to my library'}\n          </button>\n        </div>\n      </div>\n  `;\n};\n","function round(number, digits) {\n  return Math.round(number * digits) / digits;\n}\n\nconst getRandomNumber = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nfunction renderStars(element, rating) {\n  return (element.innerHTML = `\n    <div class=\"film_rating\" style=\"--rating:${\n      rating / 2\n    };\" aria-label=\"Rating of this film is ${Math.round(\n    rating / 2\n  )} out of 5.\"></div>\n`);\n}\n\nexport { round, getRandomNumber, renderStars };\n","export class MovieLibrary {\n  constructor() {\n    this.library = [];\n    this.loadLibraryFromLocalStorage();\n  }\n\n  loadLibraryFromLocalStorage() {\n    const libraryJSON = localStorage.getItem('favorite');\n    this.library = libraryJSON ? JSON.parse(libraryJSON) : [];\n  }\n\n  saveLibraryToLocalStorage() {\n    localStorage.setItem('favorite', JSON.stringify(this.library));\n  }\n\n  isFilmInLibrary(id) {\n    return this.library.some(libraryFilm => libraryFilm.id == id);\n  }\n\n  addFilmToLibrary(film) {\n    this.library.push(film);\n    this.saveLibraryToLocalStorage();\n  }\n\n  removeFilmFromLibrary(film) {\n    const index = this.library.findIndex(\n      libraryFilm => libraryFilm.id === film.id\n    );\n    if (index !== -1) {\n      this.library.splice(index, 1);\n      this.saveLibraryToLocalStorage();\n    }\n  }\n}\n",null],"names":["$bpxeT","parcelRequire","$parcel$interopDefault","$2TvXO","mark","_callee1","filmMonthWrapper","film","findFilm","genres","document","querySelector","$dBKQr","spinnerStart","$8LhE9","getRandomFilmOfMonth","_ctx1","sent","getCategoriesId","id","getGenres","innerHTML","$6d0d55a67575c206$var$createMarkup","addEventListener","_callee","event","movieLibrary","isInLibrary","button","$l2qkJ","MovieLibrary","isFilmInLibrary","target","dataset","console","log","removeFilmFromLibrary","addFilmToLibrary","textContent","spinnerStop","imageSrc","window","innerWidth","poster_path","overview","title","original_title","releaseDate","Date","release_date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","formattedReleaseDate","concat","voteAverage","vote_average","voteCount","vote_count","popularity","alt","filmGenres","filter","genre","genre_ids","slice","includes","map","param","name","join","$3RRSf","round","$2d101c92898a7d81$export$2077e0241d6afd3c","number","digits","Math","$2d101c92898a7d81$export$eab19c48dcb6310d","min","max","floor","random","$2d101c92898a7d81$export$6b958f153b36132a","element","rating","$8MBJY","$f50e3620c4266279$export$a77202e529bf9901","this","library","loadLibraryFromLocalStorage","key","libraryJSON","localStorage","getItem","JSON","parse","setItem","stringify","some","libraryFilm","push","saveLibraryToLocalStorage","index","findIndex","splice"],"version":3,"file":"film-month.b7c10c43.js.map"}